import 'dart:ui';

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:provider/provider.dart';
import 'dart:async';
import 'dart:io';

import 'partials/splash_screen.dart';
import 'core/config/backdoor_helper.dart';
import 'core/config/app_config.dart';
import 'core/utils/error_handler.dart';
import 'core/utils/logger.dart';

void main() async {
  // Ensure Flutter binding is initialized
  WidgetsFlutterBinding.ensureInitialized();

  // Setup global error handling
  await _setupGlobalErrorHandling();

  // Initialize app configuration
  await _initializeAppConfiguration();

  // Run app with error boundary
  runZonedGuarded(() => runApp(const MyApp()), (error, stack) {
    AppLogger.error('Uncaught error in app', error: error, stackTrace: stack);
    GlobalErrorHandler.handleError(error, stack);
  });
}

/// Setup global error handling for the entire application
Future<void> _setupGlobalErrorHandling() async {
  try {
    // Initialize logger
    AppLogger.initialize();

    // Setup Flutter error handling
    FlutterError.onError = (FlutterErrorDetails details) {
      FlutterError.presentError(details);
      AppLogger.error(
        'Flutter error caught',
        error: details.exception,
        stackTrace: details.stack,
      );
      GlobalErrorHandler.handleFlutterError(details);
    };

    // Setup platform-specific error handling
    if (Platform.isAndroid || Platform.isIOS) {
      // Handle platform channel errors
      PlatformDispatcher.instance.onError = (error, stack) {
        AppLogger.error(
          'Platform error caught',
          error: error,
          stackTrace: stack,
        );
        GlobalErrorHandler.handleError(error, stack);
        return true;
      };
    }

    AppLogger.info('Global error handling initialized');
  } catch (e, stack) {
    // Fallback error logging
    debugPrint('‚ùå Failed to setup global error handling: $e');
    debugPrint('Stack trace: $stack');
  }
}

/// Initialize application configuration and dependencies
Future<void> _initializeAppConfiguration() async {
  try {
    AppLogger.info('Starting app configuration initialization');

    // Set preferred orientations
    await SystemChrome.setPreferredOrientations([
      DeviceOrientation.portraitUp,
      DeviceOrientation.portraitDown,
    ]);

    // Initialize base URL configuration
    await BackdoorHelper.initializeBaseUrl();
    AppLogger.info('Base URL initialized: ${AppConfig.url}');

    // Setup system UI overlay style
    SystemChrome.setSystemUIOverlayStyle(
      const SystemUiOverlayStyle(
        statusBarColor: Colors.transparent,
        statusBarIconBrightness: Brightness.dark,
        statusBarBrightness: Brightness.light,
        systemNavigationBarColor: Colors.white,
        systemNavigationBarIconBrightness: Brightness.dark,
      ),
    );

    AppLogger.info('App configuration initialized successfully');
  } catch (e, stack) {
    AppLogger.error(
      'Failed to initialize app configuration',
      error: e,
      stackTrace: stack,
    );

    // Don't rethrow - app should still start with default configuration
  }
}

class MyApp extends StatefulWidget {
  const MyApp({super.key});

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> with WidgetsBindingObserver {
  // late AppLifecycleService _lifecycleService;
  bool _disposed = false;

  @override
  void initState() {
    super.initState();

    // Initialize lifecycle service
    // _lifecycleService = AppLifecycleService();

    // Add lifecycle observer
    WidgetsBinding.instance.addObserver(this);

    AppLogger.info('MyApp initialized');
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    super.didChangeAppLifecycleState(state);

    if (!_disposed) {
      // _lifecycleService.handleAppLifecycleChange(state);

      switch (state) {
        case AppLifecycleState.resumed:
          AppLogger.info('App resumed');
          break;
        case AppLifecycleState.paused:
          AppLogger.info('App paused');
          break;
        case AppLifecycleState.inactive:
          AppLogger.info('App inactive');
          break;
        case AppLifecycleState.detached:
          AppLogger.info('App detached');
          break;
        case AppLifecycleState.hidden:
          AppLogger.info('App hidden');
          break;
      }
    }
  }

  @override
  void dispose() {
    if (!_disposed) {
      _disposed = true;

      // Remove lifecycle observer
      WidgetsBinding.instance.removeObserver(this);

      // Dispose lifecycle service
      // _lifecycleService.dispose();

      // Dispose other global services
      BackdoorHelper.dispose();

      AppLogger.info('MyApp disposed');
    }

    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'NCH Mobile',
      debugShowCheckedModeBanner: false,

      // Theme configuration
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(
          seedColor: const Color(0xFF0F7836),
          brightness: Brightness.light,
        ),
        useMaterial3: true,
        fontFamily: 'Inter',

        // Enhanced theme configuration
        appBarTheme: const AppBarTheme(
          systemOverlayStyle: SystemUiOverlayStyle.dark,
          backgroundColor: Colors.transparent,
          elevation: 0,
          titleTextStyle: TextStyle(
            color: Color(0xFF0F7836),
            fontSize: 18,
            fontWeight: FontWeight.w600,
          ),
        ),

        elevatedButtonTheme: ElevatedButtonThemeData(
          style: ElevatedButton.styleFrom(
            backgroundColor: const Color(0xFF0F7836),
            foregroundColor: Colors.white,
            textStyle: const TextStyle(fontWeight: FontWeight.w600),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(12),
            ),
            padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
          ),
        ),

        inputDecorationTheme: InputDecorationTheme(
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(12),
            borderSide: const BorderSide(color: Color(0xFF0F7836)),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(12),
            borderSide: BorderSide(color: Colors.grey.shade300),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(12),
            borderSide: const BorderSide(color: Color(0xFF0F7836), width: 2),
          ),
          errorBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(12),
            borderSide: const BorderSide(color: Colors.red),
          ),
          contentPadding: const EdgeInsets.symmetric(
            horizontal: 16,
            vertical: 12,
          ),
        ),

        snackBarTheme: SnackBarThemeData(
          behavior: SnackBarBehavior.floating,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
          contentTextStyle: const TextStyle(
            fontSize: 14,
            fontWeight: FontWeight.w500,
          ),
        ),
      ),

      // Dark theme (optional)
      darkTheme: ThemeData(
        colorScheme: ColorScheme.fromSeed(
          seedColor: const Color(0xFF0F7836),
          brightness: Brightness.dark,
        ),
        useMaterial3: true,
        fontFamily: 'Inter',
      ),

      // Route configuration
      home: const SplashScreen(),

      // Global navigation configuration
      navigatorObservers: [AppNavigatorObserver()],

      // Error handling for navigation
      builder: (context, child) {
        // Global error boundary for UI
        return ErrorBoundary(
          child: child ?? const SizedBox.shrink(),
          onError: (error, stackTrace) {
            AppLogger.error(
              'UI Error caught by error boundary',
              error: error,
              stackTrace: stackTrace,
            );
          },
        );
      },

      // Handle unknown routes
      onUnknownRoute: (settings) {
        AppLogger.warning('Unknown route: ${settings.name}');
        return MaterialPageRoute(
          builder: (_) => const UnknownRouteScreen(),
          settings: settings,
        );
      },
    );
  }
}

/// Custom navigator observer for tracking navigation events
class AppNavigatorObserver extends NavigatorObserver {
  @override
  void didPush(Route<dynamic> route, Route<dynamic>? previousRoute) {
    super.didPush(route, previousRoute);
    AppLogger.info('Navigation: Pushed ${route.settings.name}');
  }

  @override
  void didPop(Route<dynamic> route, Route<dynamic>? previousRoute) {
    super.didPop(route, previousRoute);
    AppLogger.info('Navigation: Popped ${route.settings.name}');
  }

  @override
  void didReplace({Route<dynamic>? newRoute, Route<dynamic>? oldRoute}) {
    super.didReplace(newRoute: newRoute, oldRoute: oldRoute);
    AppLogger.info(
      'Navigation: Replaced ${oldRoute?.settings.name} with ${newRoute?.settings.name}',
    );
  }

  @override
  void didRemove(Route<dynamic> route, Route<dynamic>? previousRoute) {
    super.didRemove(route, previousRoute);
    AppLogger.info('Navigation: Removed ${route.settings.name}');
  }
}

/// Error boundary widget to catch and handle UI errors
class ErrorBoundary extends StatefulWidget {
  final Widget child;
  final void Function(Object error, StackTrace? stackTrace)? onError;

  const ErrorBoundary({super.key, required this.child, this.onError});

  @override
  State<ErrorBoundary> createState() => _ErrorBoundaryState();
}

class _ErrorBoundaryState extends State<ErrorBoundary> {
  bool _hasError = false;
  Object? _error;
  StackTrace? _stackTrace;

  @override
  Widget build(BuildContext context) {
    if (_hasError) {
      return Scaffold(
        body: Center(
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                const Icon(Icons.error_outline, size: 64, color: Colors.red),
                const SizedBox(height: 16),
                const Text(
                  'Terjadi kesalahan tak terduga',
                  style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                  textAlign: TextAlign.center,
                ),
                const SizedBox(height: 8),
                Text(
                  'Aplikasi mengalami kesalahan. Silakan coba lagi.',
                  style: TextStyle(fontSize: 14, color: Colors.grey[600]),
                  textAlign: TextAlign.center,
                ),
                const SizedBox(height: 24),
                ElevatedButton(
                  onPressed: () {
                    setState(() {
                      _hasError = false;
                      _error = null;
                      _stackTrace = null;
                    });
                  },
                  child: const Text('Coba Lagi'),
                ),
              ],
            ),
          ),
        ),
      );
    }

    return widget.child;
  }

  @override
  void didUpdateWidget(ErrorBoundary oldWidget) {
    super.didUpdateWidget(oldWidget);
    if (oldWidget.child != widget.child) {
      // Reset error state when child changes
      _hasError = false;
      _error = null;
      _stackTrace = null;
    }
  }

  void _handleError(Object error, StackTrace? stackTrace) {
    setState(() {
      _hasError = true;
      _error = error;
      _stackTrace = stackTrace;
    });

    widget.onError?.call(error, stackTrace);
  }
}

/// Screen displayed for unknown routes
class UnknownRouteScreen extends StatelessWidget {
  const UnknownRouteScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Halaman Tidak Ditemukan')),
      body: const Center(
        child: Padding(
          padding: EdgeInsets.all(16.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(Icons.error_outline, size: 64, color: Colors.grey),
              SizedBox(height: 16),
              Text(
                'Halaman tidak ditemukan',
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
              ),
              SizedBox(height: 8),
              Text(
                'Halaman yang Anda cari tidak tersedia.',
                style: TextStyle(fontSize: 14, color: Colors.grey),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
